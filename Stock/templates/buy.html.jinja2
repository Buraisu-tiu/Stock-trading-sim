{% extends "base.html.jinja2" %}
{% block content %}
<style>
    body {
        background: 
            radial-gradient(circle at 0% 0%, rgba(0, 123, 255, 0.05) 0%, transparent 50%),
            radial-gradient(circle at 100% 100%, rgba(255, 0, 221, 0.05) 0%, transparent 50%),
            {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        background-attachment: fixed;
        color: #ffffff;
        font-family: 'Inter', sans-serif;
        min-height: 100vh;
        margin: 0;
        padding: 0;
        display: block; /* Changed from flex to block to prevent interference with base template */
        overflow-x: hidden;
    }

    .content-wrapper {
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding-top: 2rem; /* Add space below the navbar */
        min-height: calc(100vh - 60px); /* Adjust based on your navbar height */
    }

    .buy-container {
        width: 100%;
        max-width: 1200px;
        padding: 2rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 2rem;
        margin: 0 auto; /* Center the container */
    }

    .buy-title {
        font-size: 3.5rem;
        font-weight: 700;
        margin: 0;
        background: linear-gradient(45deg, #fff, {{ user.accent_color if user and user.accent_color else '#007bff' }});
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
    }

    .form-container {
        width: 100%;
        max-width: 500px;
        background: rgba(255, 255, 255, 0.03);
        backdrop-filter: blur(12px);
        border-radius: 24px;
        padding: 2.5rem;
        box-shadow: 
            0 8px 32px rgba(0, 0, 0, 0.2),
            0 0 0 1px rgba(255, 255, 255, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .form-container:hover {
        transform: translateY(-5px);
        box-shadow: 
            0 12px 40px rgba(0, 0, 0, 0.3),
            0 0 0 1px rgba(255, 255, 255, 0.2);
    }

    .input-group {
        margin-bottom: 1.5rem;
    }

    .input-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
        font-weight: 500;
        color: rgba(255, 255, 255, 0.8);
    }

    .input-group input,
    .input-group select {
        width: 100%;
        padding: 1rem;
        background: rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        color: #ffffff;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .input-group input:focus,
    .input-group select:focus {
        outline: none;
        border-color: {{ user.accent_color if user and user.accent_color else '#007bff' }};
        box-shadow: 0 0 0 3px rgba({{ (user.accent_color if user and user.accent_color else '#007bff') | hex_to_rgb }}, 0.2);
    }

    .input-group select {
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 1.2em;
        padding-right: 2.5rem;
    }

    .buy-button {
        width: 100%;
        padding: 1rem;
        background: {{ user.accent_color if user and user.accent_color else '#007bff' }};
        border: none;
        border-radius: 12px;
        color: white;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 1rem;
    }

    .buy-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba({{ (user.accent_color if user and user.accent_color else '#007bff') | hex_to_rgb }}, 0.4);
    }

    .alert {
        position: fixed;
        top: 2rem;
        left: 50%;
        transform: translateX(-50%);
        padding: 1rem 2rem;
        border-radius: 12px;
        font-weight: 500;
        backdrop-filter: blur(8px);
        animation: slideDown 0.5s ease-out;
        z-index: 1000;
        min-width: 300px;
        text-align: center;
    }

    .alert-success {
        background: rgba(46, 213, 115, 0.1);
        border: 1px solid rgba(46, 213, 115, 0.2);
        color: #2ed573;
        margin-top: 40%;
    }

    .alert-error {
        background: rgba(255, 71, 87, 0.1);
        border: 1px solid rgba(255, 71, 87, 0.2);
        color: #ff4757;
        margin-top: 40%;
    }

    .success-popup {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        background: {{ user.accent_color if user and user.accent_color else '#007bff' }};
        color: white;
        padding: 1rem 2rem;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        transform: translateY(100%);
        opacity: 0;
        
        transition: all 0.3s ease;
    }

    .success-popup.show {
        transform: translateY(0);
        opacity: 1;
    }

    @keyframes slideDown {
        from {
            transform: translate(-50%, -100%);
            opacity: 0;
        }
        to {
            transform: translate(-50%, 0);
            opacity: 1;
        }
    }

    @media (max-width: 768px) {
        .buy-container {
            padding: 1rem;
        }

        .buy-title {
            font-size: 2.5rem;
        }

        .form-container {
            padding: 1.5rem;
        }
    }
</style>

<div class="buy-container">
    <h1 class="buy-title">Buy Assets</h1>
    <div class="form-container">
        <form method="POST" action="{{ url_for('buy') }}" onsubmit="return validateForm()">
            <div class="input-group">
                <label for="symbol">Symbol</label>
                <input type="text" id="symbol" name="symbol" required placeholder="Enter asset symbol">
            </div>
            
            <div class="input-group">
                <label for="shares">Quantity</label>
                <input type="number" id="shares" name="shares" step="0.01" min="0.01" required placeholder="Enter quantity">
            </div>
            
            <div class="input-group">
                <label for="asset_type">Asset Type</label>
                <select id="asset_type" name="asset_type" required>
                    <option value="" disabled selected>Select asset type</option>
                    <option value="stock">Stock</option>
                    <option value="crypto">Cryptocurrency</option>
                </select>
            </div>
    
            <button type="submit" class="buy-button">Purchase Asset</button>
        </form>
    </div>

    {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
            {% for category, message in messages %}
                <div class="alert alert-{{ category }}">
                    {{ message }}
                </div>
            {% endfor %}
        {% endif %}
    {% endwith %}
</div>

<div id="success-popup" class="success-popup">
    Purchase successful!
</div>

<script>
    function validateForm() {
        const shares = parseFloat(document.getElementById('shares').value);
        const symbol = document.getElementById('symbol').value.trim();
        
        if (isNaN(shares) || shares <= 0) {
            showAlert('Please enter a valid positive number for quantity.', 'error');
            return false;
        }
        
        if (!symbol) {
            showAlert('Please enter a valid symbol.', 'error');
            return false;
        }
        
        return true;
    }

    function showAlert(message, type) {
        const alert = document.createElement('div');
        alert.className = `alert alert-${type}`;
        alert.textContent = message;
        document.body.appendChild(alert);
        
        setTimeout(() => {
            alert.remove();
        }, 3000);
    }

    {% if success %}
        document.addEventListener('DOMContentLoaded', function() {
            const popup = document.getElementById('success-popup');
            popup.classList.add('show');
            
            setTimeout(() => {
                popup.classList.remove('show');
            }, 3000);
        });
    {% endif %}
</script>
{% endblock %}