{% extends "base.html.jinja2" %}
{% block content %}
<style>
    .dashboard {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }
    .dashboard-grid {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 1.5rem;
    }
    .card {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }
    .card-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
    }
    .stat-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 1rem;
    }
    .stat-item {
        text-align: center;
        padding: 0.5rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
    }
    .stat-label {
        font-size: 0.875rem;
        color: rgba(255, 255, 255, 0.6);
    }
    .stat-value {
        font-size: 1.25rem;
        font-weight: 600;
        margin-top: 0.5rem;
    }
    .positive {
        color: #4caf50;
    }
    .negative {
        color: #f44336;
    }
    .order-form label {
        display: block;
        margin-bottom: 0.5rem;
        color: rgba(255, 255, 255, 0.8);
    }
    .order-form input,
    .order-form select {
        width: 100%;
        padding: 0.75rem;
        margin-bottom: 1rem;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 5px;
        color: #ffffff;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }
    .order-form input:focus,
    .order-form select:focus {
        outline: none;
        border-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        box-shadow: 0 0 0 2px {{ user.accent_color if user and user.accent_color else '#64ffda' }}40;
    }
    .order-form button {
        width: 100%;
        padding: 0.75rem;
        background: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        color: {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        border: none;
        border-radius: 5px;
        font-weight: 600;
        cursor: pointer;
        transition: opacity 0.3s ease, transform 0.3s ease;
    }
    .order-form button:hover {
        opacity: 0.9;
        transform: translateY(-2px);
    }
    .order-summary {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 5px;
        padding: 1rem;
        margin-top: 1rem;
    }
    .order-summary-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
    }
    .recent-orders {
        grid-column: span 3;
    }
    .recent-orders table {
        width: 100%;
        border-collapse: collapse;
    }
    .recent-orders th,
    .recent-orders td {
        padding: 0.75rem;
        text-align: left;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    .recent-orders th {
        font-weight: 600;
        color: rgba(255, 255, 255, 0.8);
    }
    .watchlist-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 5px;
        margin-bottom: 0.5rem;
    }
    .add-to-watchlist {
        background: none;
        border: none;
        color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        cursor: pointer;
        font-size: 0.875rem;
        transition: opacity 0.3s ease;
    }
    .add-to-watchlist:hover {
        opacity: 0.8;
    }
</style>

<div class="dashboard">
    <h1 class="text-3xl font-bold mb-6">Buy Assets</h1>
    <div class="dashboard-grid">
        <div class="card">
            <h2 class="card-title">Market Overview</h2>
            <div class="stat-grid">
                {% for key, value in market_overview.items() %}
                    <div class="stat-item">
                        <div class="stat-label">{{ key }}</div>
                        <div class="stat-value {% if value.startswith('+') %}positive{% elif value.startswith('-') %}negative{% endif %}">
                            {{ value }}
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
        <div class="card">
            <h2 class="card-title">Your Portfolio</h2>
            <div class="stat-grid">
                {% for key, value in user_portfolio.items() %}
                    <div class="stat-item">
                        <div class="stat-label">{{ key }}</div>
                        <div class="stat-value {% if key == "Today's Change" %}{% if value.startswith('+') %}positive{% elif value.startswith('-') %}negative{% endif %}{% endif %}">
                            {{ value }}
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
        <div class="card">
            <h2 class="card-title">Place Order</h2>
            <form method="POST" action="{{ url_for('buy') }}" class="order-form" id="buyForm">
                <label for="symbol">Symbol</label>
                <input type="text" id="symbol" name="symbol" required>
                
                <label for="shares">Quantity</label>
                <input type="number" id="shares" name="shares" step="0.01" min="0.01" required>
                
                <label for="asset_type">Asset Type</label>
                <select id="asset_type" name="asset_type" required>
                    <option value="stock">Stock</option>
                    <option value="crypto">Cryptocurrency</option>
                </select>
                
                <div id="orderSummary" class="order-summary" style="display: none;">
                    <h3 class="text-lg font-semibold mb-2">Order Summary</h3>
                    <div class="order-summary-item">
                        <span>Estimated Price:</span>
                        <span id="estimatedPrice">$0.00</span>
                    </div>
                    <div class="order-summary-item">
                        <span>Trading Fee:</span>
                        <span id="tradingFee">$0.00</span>
                    </div>
                    <div class="order-summary-item">
                        <span>Total:</span>
                        <span id="totalCost">$0.00</span>
                    </div>
                </div>
                
                <button type="submit">Place Order</button>
            </form>
            <button id="addToWatchlist" class="add-to-watchlist mt-4">Add to Watchlist</button>
        </div>
        <div class="card">
            <h2 class="card-title">Watchlist</h2>
            <div id="watchlistContainer">
                {% for symbol, change in watchlist.items() %}
                    <div class="watchlist-item">
                        <span>{{ symbol }}</span>
                        <span class="{% if change.startswith('+') %}positive{% elif change.startswith('-') %}negative{% endif %}">
                            {{ change }}
                        </span>
                    </div>
                {% endfor %}
            </div>
        </div>
        <div class="recent-orders card">
            <h2 class="card-title">Recent Orders</h2>
            <table>
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Symbol</th>
                        <th>Type</th>
                        <th>Quantity</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    {% for order in recent_orders %}
                        <tr>
                            <td>{{ order.Date }}</td>
                            <td>{{ order.Symbol }}</td>
                            <td>{{ order.Type }}</td>
                            <td>{{ order.Quantity }}</td>
                            <td>{{ order.Status }}</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('buyForm');
        const symbolInput = document.getElementById('symbol');
        const sharesInput = document.getElementById('shares');
        const assetTypeSelect = document.getElementById('asset_type');
        const orderSummary = document.getElementById('orderSummary');
        const estimatedPriceSpan = document.getElementById('estimatedPrice');
        const tradingFeeSpan = document.getElementById('tradingFee');
        const totalCostSpan = document.getElementById('totalCost');
        const addToWatchlistBtn = document.getElementById('addToWatchlist');

        function updateOrderSummary() {
            const symbol = symbolInput.value.trim();
            const shares = parseFloat(sharesInput.value);
            const assetType = assetTypeSelect.value;

            if (symbol && shares > 0) {
                fetch('/api/order_summary', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        symbol: symbol,
                        quantity: shares,
                        asset_type: assetType
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        orderSummary.style.display = 'none';
                        alert(data.error);
                    } else {
                        estimatedPriceSpan.textContent = data.estimated_price;
                        tradingFeeSpan.textContent = data.trading_fee;
                        totalCostSpan.textContent = data.total;
                        orderSummary.style.display = 'block';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    orderSummary.style.display = 'none';
                });
            } else {
                orderSummary.style.display = 'none';
            }
        }

        symbolInput.addEventListener('input', updateOrderSummary);
        sharesInput.addEventListener('input', updateOrderSummary);
        assetTypeSelect.addEventListener('change', updateOrderSummary);

        form.addEventListener('submit', function(event) {
            event.preventDefault();
            if (confirm('Are you sure you want to place this order?')) {
                this.submit();
            }
        });

        addToWatchlistBtn.addEventListener('click', function() {
            const symbol = symbolInput.value.trim();
            const assetType = assetTypeSelect.value;

            if (symbol) {
                fetch('/api/add_to_watchlist', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        symbol: symbol,
                        asset_type: assetType
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Added to watchlist!');
                        location.reload();  // Refresh the page to update the watchlist
                    } else {
                        alert(data.error || 'Failed to add to watchlist');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while adding to watchlist');
                });
            } else {
                alert('Please enter a symbol to add to the watchlist');
            }
        });
    });
</script>
{% endblock %}

