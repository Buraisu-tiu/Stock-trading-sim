{% extends "base.html.jinja2" %}
{% block content %}
<style>
    .dashboard {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2.5rem;
        background: radial-gradient(circle at top right, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}10,
            transparent 60%),
            radial-gradient(circle at bottom left,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}08,
            transparent 60%);
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(1, 1fr);
        gap: 2rem;
    }

    .card {
        background: 
            linear-gradient(120deg, 
                rgba(255,255,255,0.1), 
                rgba(255,255,255,0.05) 30%,
                {{ user.accent_color if user and user.accent_color else '#64ffda' }}08 50%,
                rgba(255,255,255,0.05) 85%
            ),
            rgba(255,255,255,0.03);
        backdrop-filter: blur(12px);
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 24px;
        padding: 2rem;
        transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }

    .card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            90deg,
            transparent,
            rgba(255,255,255,0.1),
            transparent
        );
        transition: 0.5s;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 
            0 20px 40px rgba(0,0,0,0.2),
            0 0 0 1px {{ user.accent_color if user and user.accent_color else '#64ffda' }}20;
    }

    .card:hover::before {
        left: 100%;
    }

    .card-title {
        font-size: 1.5rem;
        font-weight: 700;
        background: linear-gradient(to right, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}80);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 1.5rem;
    }

    table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 0.75rem;
    }

    th, td {
        padding: 1.25rem;
        background: rgba(255,255,255,0.03);
        border: 1px solid rgba(255,255,255,0.1);
        text-align: left;
    }

    th {
        font-weight: 600;
        background: rgba(255,255,255,0.05);
        letter-spacing: 0.5px;
    }

    tbody tr {
        transition: all 0.3s ease;
    }

    tbody tr:hover td {
        background: {{ user.accent_color if user and user.accent_color else '#64ffda' }}10;
        border-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }}30;
        transform: scale(1.01);
    }

    .positive { color: #4caf50; }
    .negative { color: #f44336; }

    .btn {
        padding: 1rem;
        background: 
            linear-gradient(135deg, 
                {{ user.accent_color if user and user.accent_color else '#64ffda' }}90,
                {{ user.accent_color if user and user.accent_color else '#64ffda' }});
        border: none;
        border-radius: 14px;
        color: {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }

    .btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            90deg,
            transparent,
            rgba(255,255,255,0.2),
            transparent
        );
        transition: 0.5s;
    }

    .btn:hover::before {
        left: 100%;
    }

    .btn:hover {
        transform: translateY(-3px);
        box-shadow: 
            0 10px 20px {{ user.accent_color if user and user.accent_color else '#64ffda' }}40,
            0 0 0 1px {{ user.accent_color if user and user.accent_color else '#64ffda' }}60;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
        color: rgba(255,255,255,0.7);
    }

    .form-group input,
    .form-group select {
        width: 100%;
        padding: 1rem 1.25rem;
        background: rgba(255,255,255,0.03);
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 14px;
        color: #fff;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .form-group input:hover,
    .form-group select:hover {
        background: {{ user.accent_color if user and user.accent_color else '#64ffda' }}10;
        border-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }}30;
    }

    .form-group input:focus,
    .form-group select:focus {
        outline: none;
        background: {{ user.accent_color if user and user.accent_color else '#64ffda' }}15;
        border-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        box-shadow: 0 0 0 4px {{ user.accent_color if user and user.accent_color else '#64ffda' }}20;
    }
</style>

<div class="dashboard">
    <h1 class="text-3xl font-bold mb-6">Global Leaderboard</h1>
    <div class="dashboard-grid">
        <div class="card">
            <h2 class="card-title">Leaderboard</h2>
            <table>
                <thead>
                    <tr>
                        <th>Rank</th>
                        <th>Trader</th>
                        <th>Portfolio Value</th>
                        <th>Daily Change</th>
                    </tr>
                </thead>
                <tbody id="globalLeaderboardBody">
                    <!-- Populated by JavaScript -->
                </tbody>
            </table>
        </div>

        <div class="card">
            <h2 class="card-title">Create Group</h2>
            <form id="createGroupForm" class="space-y-4">
                <div class="form-group">
                    <label for="groupName">Group Name</label>
                    <input type="text" id="groupName" name="groupName" required>
                </div>
                <button type="submit" class="btn">Create Group</button>
            </form>
        </div>

        <div class="card">
            <h2 class="card-title">Manage Groups</h2>
            <div id="groupManagement"></div>
        </div>

        <div id="groupLeaderboards" class="space-y-8">
            <!-- Group leaderboards will be populated here -->
        </div>
    </div>
</div>

<template id="groupLeaderboardTemplate">
    <div id="groupLeaderboards" class="mt-8 space-y-8">
        {% if group_leaderboards %}
            {% for group in group_leaderboards %}
                <div class="leaderboard">
                    <h2>{{ group.name }}</h2>
                    <div class="flex justify-between items-center">
                        <button class="add-member-btn btn btn-primary" data-group-id="{{ group.id }}">Add Member</button>
                        <button class="leave-group-btn btn btn-danger" data-group-id="{{ group.id }}">Leave Group</button>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>Rank</th>
                                <th>Trader</th>
                                <th>Portfolio Value</th>
                                <th>Daily Change</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for member in group.members %}
                                <tr>
                                    <td>#{{ loop.index }}</td>
                                    <td>{{ member.username }}</td>
                                    <td>{{ member.account_value }}</td>
                                    <td class="{{ 'text-green-400' if member.daily_change >= 0 else 'text-red-400' }}">
                                        {{ member.daily_change }}
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% endfor %}
        {% else %}
            <p>No groups found. Create a new group to get started!</p>
        {% endif %}
    </div>
</template>

<script>
function formatCurrency(value) {
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
    }).format(value);
}

function formatPercentage(value) {
    return new Intl.NumberFormat('en-US', {
        style: 'percent',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
        signDisplay: 'exceptZero'
    }).format(value / 100);
}

function createLeaderboardRow(user, rank) {
    return `
        <tr>
            <td>#${rank}</td>
            <td><a href="/portfolio/${user.id}" class="hover:underline">${user.username}</a></td>
            <td>${formatCurrency(user.account_value)}</td>
            <td class="${user.daily_change >= 0 ? 'positive' : 'negative'}">
                ${formatPercentage(user.daily_change)}
            </td>
        </tr>
    `;
}

async function fetchLeaderboardData() {
    try {
        const response = await fetch('/api/leaderboard-data');
        const data = await response.json();

        if (data.status !== 'success') {
            throw new Error(data.message || 'Failed to fetch leaderboard data');
        }

        document.getElementById('globalLeaderboardBody').innerHTML = data.global_leaderboard
            .map((user, index) => createLeaderboardRow(user, index + 1))
            .join('');

        const groupsContainer = document.getElementById('groupLeaderboards');
        groupsContainer.innerHTML = '';

        data.group_leaderboards.forEach(group => {
            const template = document.getElementById('groupLeaderboardTemplate');
            const clone = template.content.cloneNode(true);

            clone.querySelector('h2').textContent = group.name;

            const tbody = clone.querySelector('tbody');
            tbody.innerHTML = group.members
                .map((member, index) => createLeaderboardRow(member, index + 1))
                .join('');

            clone.querySelector('.add-member-btn').onclick = () => showAddMemberDialog(group.id);
            clone.querySelector('.leave-group-btn').onclick = () => leaveGroup(group.id);

            groupsContainer.appendChild(clone);
        });

    } catch (error) {
        console.error('Error:', error);
        alert('Failed to load leaderboard data. Please try again.');
    }
}

async function showAddMemberDialog(groupId) {
    const username = prompt('Enter username to add to the group:');
    if (!username) return;

    try {
        const response = await fetch(`/group_leaderboard/${groupId}/add_member`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username })
        });

        const data = await response.json();
        if (data.success) {
            fetchLeaderboardData();
        } else {
            alert(data.error || 'Failed to add member');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to add member. Please try again.');
    }
}

async function leaveGroup(groupId) {
    if (!confirm('Are you sure you want to leave this group?')) return;

    try {
        const response = await fetch(`/group_leaderboard/${groupId}/leave`, {
            method: 'POST'
        });

        const data = await response.json();
        if (data.success) {
            fetchLeaderboardData();
        } else {
            alert(data.error || 'Failed to leave group');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to leave group. Please try again.');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    fetchLeaderboardData();
});

document.addEventListener('DOMContentLoaded', () => {
    const createGroupForm = document.getElementById('createGroupForm');
    if (createGroupForm) {
        createGroupForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const groupName = document.getElementById('groupName').value;

            try {
                const response = await fetch('/create_group_leaderboard', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name: groupName })
                });

                const data = await response.json();
                if (data.success) {
                    alert('Group created successfully!');
                    fetchLeaderboardData(); // Refresh the leaderboard data
                } else {
                    alert(data.error || 'Failed to create group');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to create group. Please try again.');
            }
        });
    }
});

async function leaveGroup(groupId) {
    if (!confirm('Are you sure you want to leave this group?')) return;

    try {
        const response = await fetch(`/group_leaderboard/${groupId}/leave`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });

        const data = await response.json();
        if (data.success) {
            alert('Successfully left the group!');
            fetchLeaderboardData(); // Refresh the leaderboard data
        } else {
            alert(data.error || 'Failed to leave group');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to leave group. Please try again.');
    }
}
</script>
{% endblock %}