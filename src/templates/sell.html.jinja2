{% extends "base.html.jinja2" %}
{% block content %}
<style>
    :root {
        --bg-primary: #0a0a0a;
        --bg-secondary: #1a1a1a;
        --text-primary: #ffffff;
        --text-secondary: #b3b3b3;
        --accent-color: {{ user.accent_color if user and user.accent_color else '#007bff' }};
        --error-color: #ff4757;
        --success-color: #2ed573;
    }

    body {
        background: 
            radial-gradient(circle at 0% 0%, rgba(0, 123, 255, 0.05) 0%, transparent 50%),
            radial-gradient(circle at 100% 100%, rgba(255, 0, 221, 0.05) 0%, transparent 50%),
            var(--bg-primary);
        background-attachment: fixed;
        color: var(--text-primary);
        font-family: 'Inter', sans-serif;
        min-height: 100vh;
        margin: 0;
        padding: 0;
        display: block;
        overflow-x: hidden;
        transition: background-color 0.3s ease;
    }

    body.light-mode {
        --bg-primary: #f0f0f0;
        --bg-secondary: #ffffff;
        --text-primary: #333333;
        --text-secondary: #666666;
    }

    .content-wrapper {
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding-top: 2rem;
        min-height: calc(100vh - 60px);
    }

    .sell-container {
        width: 100%;
        max-width: 600px;
        padding: 2rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 2rem;
        margin: 0 auto;
    }

    .sell-title {
        font-size: 3.5rem;
        font-weight: 700;
        margin: 0;
        background: linear-gradient(45deg, var(--text-primary), var(--accent-color));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
    }

    .form-container {
        width: 100%;
        background: var(--bg-secondary);
        backdrop-filter: blur(12px);
        border-radius: 24px;
        padding: 2.5rem;
        box-shadow: 
            0 8px 32px rgba(0, 0, 0, 0.2),
            0 0 0 1px rgba(255, 255, 255, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .form-container:hover {
        transform: translateY(-5px);
        box-shadow: 
            0 12px 40px rgba(0, 0, 0, 0.3),
            0 0 0 1px rgba(255, 255, 255, 0.2);
    }

    .input-group {
        margin-bottom: 1.5rem;
    }

    .input-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
        font-weight: 500;
        color: var(--text-secondary);
    }

    .input-group input,
    .input-group select {
        width: 100%;
        padding: 1rem;
        background: var(--bg-primary);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        color: var(--text-primary);
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .input-group input:focus,
    .input-group select:focus {
        outline: none;
        border-color: var(--accent-color);
        box-shadow: 0 0 0 3px rgba({{ (user.accent_color if user and user.accent_color else '#007bff') | hex_to_rgb }}, 0.2);
    }

    .sell-button {
        width: 100%;
        padding: 1rem;
        background: var(--accent-color);
        border: none;
        border-radius: 12px;
        color: white;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 1rem;
    }

    .sell-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba({{ (user.accent_color if user and user.accent_color else '#007bff') | hex_to_rgb }}, 0.4);
    }

    .alert {
        position: fixed;
        top: 2rem;
        left: 50%;
        transform: translateX(-50%);
        padding: 1rem 2rem;
        border-radius: 12px;
        font-weight: 500;
        backdrop-filter: blur(8px);
        animation: slideDown 0.5s ease-out;
        z-index: 1000;
        min-width: 300px;
        text-align: center;
    }

    .alert-success {
        background: rgba(46, 213, 115, 0.1);
        border: 1px solid rgba(46, 213, 115, 0.2);
        color: var(--success-color);
    }

    .alert-error {
        background: rgba(255, 71, 87, 0.1);
        border: 1px solid rgba(255, 71, 87, 0.2);
        color: var(--error-color);
    }

    .success-popup {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        background: var(--accent-color);
        color: white;
        padding: 1rem 2rem;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        transform: translateY(100%);
        opacity: 0;
        transition: all 0.3s ease;
    }

    .success-popup.show {
        transform: translateY(0);
        opacity: 1;
    }

    .mode-toggle {
        position: fixed;
        top: 1rem;
        right: 1rem;
        background: var(--bg-secondary);
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .mode-toggle:hover {
        transform: scale(1.1);
    }

    .mode-toggle i {
        font-size: 1.2rem;
        color: var(--text-primary);
    }

    .confirmation-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .confirmation-content {
        background: var(--bg-secondary);
        padding: 2rem;
        border-radius: 12px;
        text-align: center;
    }

    .confirmation-buttons {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-top: 1rem;
    }

    .confirmation-buttons button {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .confirm-sell {
        background: var(--accent-color);
        color: white;
    }

    .cancel-sell {
        background: var(--bg-primary);
        color: var(--text-primary);
    }

    .real-time-price {
        font-size: 1.2rem;
        font-weight: 600;
        margin-top: 1rem;
        text-align: center;
    }

    @keyframes slideDown {
        from {
            transform: translate(-50%, -100%);
            opacity: 0;
        }
        to {
            transform: translate(-50%, 0);
            opacity: 1;
        }
    }

    @media (max-width: 768px) {
        .sell-container {
            padding: 1rem;
        }

        .sell-title {
            font-size: 2.5rem;
        }

        .form-container {
            padding: 1.5rem;
        }
    }
</style>

<div class="content-wrapper">
    <div class="sell-container">
        <h1 class="sell-title">Sell Assets</h1>
        <div class="form-container">
            <form id="sellForm" method="POST" action="{{ url_for('trading.sell') }}" onsubmit="return showConfirmation(event)">
                <div class="input-group">
                    <label for="symbol">Select Asset</label>
                    <select id="symbol" name="symbol" required onchange="updatePrice()">
                        <option value="">Choose an asset</option>
                        {% for item in portfolio_items %}
                            <option value="{{ item.symbol }}" data-shares="{{ item.shares }}">
                                {{ item.symbol }} ({{ item.shares }} shares)
                            </option>
                        {% endfor %}
                    </select>
                </div>
                
                <div class="input-group">
                    <label for="shares">Quantity to Sell</label>
                    <input type="number" id="shares" name="shares" step="0.01" min="0.01" required 
                           placeholder="Enter amount" oninput="updateTotalValue()">
                </div>

                <div class="real-time-price">
                    Current Price: <span id="currentPrice">-</span><br>
                    Total Value: <span id="totalValue">-</span>
                </div>
            
                <button type="submit" class="sell-button">Sell Asset</button>
            </form>
        </div>
    </div>
</div>

{% with messages = get_flashed_messages(with_categories=true) %}
    {% if messages %}
        {% for category, message in messages %}
            <div class="alert alert-{{ category }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}
{% endwith %}

<div id="success-popup" class="success-popup">
    Sale completed successfully
</div>

<button class="mode-toggle" onclick="toggleMode()">
    <i class="fas fa-moon"></i>
</button>

<div id="confirmationModal" class="confirmation-modal">
    <div class="confirmation-content">
        <h2>Confirm Sale</h2>
        <p>Are you sure you want to sell <span id="confirmShares"></span> shares of <span id="confirmSymbol"></span>?</p>
        <p>Total value: <span id="confirmValue"></span></p>
        <div class="confirmation-buttons">
            <button class="confirm-sell" onclick="confirmSell()">Confirm</button>
            <button class="cancel-sell" onclick="cancelSell()">Cancel</button>
        </div>
    </div>
</div>

<script src="https://kit.fontawesome.com/your-fontawesome-kit.js" crossorigin="anonymous"></script>
<script>
    let currentMode = 'dark';

    function toggleMode() {
        const body = document.body;
        const modeToggle = document.querySelector('.mode-toggle i');

        if (currentMode === 'dark') {
            body.classList.add('light-mode');
            modeToggle.classList.remove('fa-moon');
            modeToggle.classList.add('fa-sun');
            currentMode = 'light';
        } else {
            body.classList.remove('light-mode');
            modeToggle.classList.remove('fa-sun');
            modeToggle.classList.add('fa-moon');
            currentMode = 'dark';
        }
    }

    function validateForm() {
        const shares = parseFloat(document.getElementById('shares').value);
        const symbol = document.getElementById('symbol');
        const selectedOption = symbol.options[symbol.selectedIndex];
        const availableShares = parseFloat(selectedOption.dataset.shares);

        if (isNaN(shares) || shares <= 0) {
            showAlert('Please enter a valid positive number for quantity', 'error');
            return false;
        }

        if (shares > availableShares) {
            showAlert(`You can't sell more than ${availableShares} shares`, 'error');
            return false;
        }

        return true;
    }

    function showAlert(message, category) {
        const alert = document.createElement('div');
        alert.className = `alert alert-${category}`;
        alert.textContent = message;
        document.body.appendChild(alert);
        
        setTimeout(() => {
            alert.remove();
        }, 3000);
    }

    function showConfirmation(event) {
        event.preventDefault();
        if (validateForm()) {
            const shares = document.getElementById('shares').value;
            const symbol = document.getElementById('symbol').value;
            const totalValue = document.getElementById('totalValue').textContent;

            document.getElementById('confirmShares').textContent = shares;
            document.getElementById('confirmSymbol').textContent = symbol;
            document.getElementById('confirmValue').textContent = totalValue;

            document.getElementById('confirmationModal').style.display = 'flex';
        }
        return false;
    }

    function confirmSell() {
        document.getElementById('sellForm').submit();
    }

    function cancelSell() {
        document.getElementById('confirmationModal').style.display = 'none';
    }

    async function updatePrice() {
        const symbol = document.getElementById('symbol').value;
        if (symbol) {
            try {
                const response = await fetch(`/api/price/${symbol}`);
                const data = await response.json();
                document.getElementById('currentPrice').textContent = `$${data.price.toFixed(2)}`;
                updateTotalValue();
            } catch (error) {
                console.error('Error fetching price:', error);
            }
        } else {
            document.getElementById('currentPrice').textContent = '-';
            document.getElementById('totalValue').textContent = '-';
        }
    }

    function updateTotalValue() {
        const shares = parseFloat(document.getElementById('shares').value);
        const price = parseFloat(document.getElementById('currentPrice').textContent.replace('$', ''));
        if (!isNaN(shares) && !isNaN(price)) {
            const totalValue = shares * price;
            document.getElementById('totalValue').textContent = `$${totalValue.toFixed(2)}`;
        } else {
            document.getElementById('totalValue').textContent = '-';
        }
    }

    // Update price every 30 seconds
    setInterval(updatePrice, 30000);

    {% if success %}
        document.addEventListener('DOMContentLoaded', function() {
            const popup = document.getElementById('success-popup');
            popup.classList.add('show');
            
            setTimeout(() => {
                popup.classList.remove('show');
            }, 3000);
        });
    {% endif %}

    // Initial price update
    updatePrice();
</script>
{% endblock %}